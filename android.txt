view模块

1、view绘制流程

onMeasure 计算自身控件的大小，宽度，margin,padding 算出来view的宽度
mode: AT_MOST 对应 wrap ; excetly 精确的
onMeasure 流程是先计算子view的位置，最后在计算出parent的宽度和高度
onLayout(l,r,t,b)  用来确定当前View在ViewGroup中的位置 这里面用到padding ,margin,相对于parent的一个相对位置

2、view的生命周期
 
   constructor
   onFinishInflate
   Activity onCreate
   Activity onResume
   onAttachedToWindow
   onMeasure
   onLayout
   onDraw
   onDetachedFromWindow
在Activity的onCreate方法中加载View，View的onFinishInflate会被调用，继而Activity的生命周期执行到onResume方法之后View才被附着到窗口上，继而进行绘制工作，onMeasure、onSizeChanged 、onLayout、onDraw

3、注意事项：
   不要在ondraw里面做过多的耗时操作和new 一些对象，应该这个是被一致执行的 60fps 16ms 
   丢帧： 16ms 内没有绘制完成，下一个16ms来了，就会出现 
   overdraw:屏幕上的某个像素在同一帧的时间内被绘制了多次 canvers.clip(),viewstub,merge ：复杂的Layout层级，重叠的View，重叠的背景这几种


4、动画
   传统动画 ：帧动画，补间动画(alpha,translate,scale,rotate)
   属性动画：改变View的一些属性，ObjectAnimator动画

5、自定义View ,ViewGroup

   viewgroup:onMeasure, onLayout 进行处理

   listView recycleView 区分
   recycleView:
   ViewHolder配置
   支持更多，layoutmanager支持grid,linear ,StaggeredGrid
   item动画效果
   高效的item刷新，局部刷新
   缓存机制不同，更高效,尤其是离开屏幕后，然后再次进行加载，会根据position 和 ViewHolder的flag进行双重判断，是否bindHolder还是从cache里面获取
      recycleView的ViewCacheExtension 和 RecycledViewPool 使用 可以提供一个全局的recycleView,减少内存使用


imageView模块

setImageResource UI 主线程操作
setImageBitmap  转化为setImageDrawable
setImageDrawable 建议使用


bitmap 模块

图片内存大小计算：width* heigth*每一个像素占用字节数

ALPHA 1;  RGB_565: 2 ; ARGB_4444 : 2 ;  ARGB_8888: 4 

质量压缩：改变quality， 图片上传，分享，限制图片大小等等
采用压缩：改变inSampleSize 采样率，用来显示到界面上，内存限制
缩放压缩：martix，改变了图片的大小（长度宽度）
RGB_565压缩：设置inPreferredConfig = Bitmap.Config.RGB_565 

compress(CompressFormat.PNG, quality, baos);这样的png格式，quality就没有作用了，bytes.length不会变化，因为png图片是无损的，不能进行压缩


质量压缩无法避免oom,但可以改变图片在磁盘中或者说是File文件的大小，尺寸压缩可以避免OOM，但不改变图片本身的大小,只改变加载是在内存中的大小，即bitmap


BitmapRegionDecoder 处理图片分片展示，区域解码器



activity模块

1、ActivityGroup 可以把activity当作一个View来实现，可以实现多个activity共享一个View效果,例如：购物车，2个activity无缝衔接


2、Activity生命周期流程：onCreate,onResume,onPause,onDestroy等，生命周期的流转都是异步发消息到主线程loop里面，然后进行生命周期处理
  https://www.zhihu.com/question/34652589/answer/90344494?from=profile_answer_card 
  Android中为什么主线程不会因为Looper.loop()里的死循环卡死  : https://www.zhihu.com/question/34652589/answer/90344494?from=profile_answer_card
  Activity里面，所有ui的操作，例如： 各种点击事件，activity生命周期，界面刷新，都是通过handle发送消息处理

http://www.momoandy.com/2019/01/24/Android-28%E7%89%88%E6%9C%AC%E6%9C%89%E5%85%B3AMS%E5%9B%9E%E8%B0%83Activity%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F%E7%9A%84%E6%B5%81%E7%A8%8B/

http://gityuan.com/2016/03/18/start-activity-cycle/

https://www.jianshu.com/p/61b37fa411ca


系统模块：

1、 AIDL通信

2、 进程间通信

3、 ActivityManagerService、 InputManagerService、 WindowManagerService，机制了解

http://zjutkz.net/2016/11/17/Android%E4%B8%AD%E4%BA%8B%E4%BB%B6%E4%BC%A0%E9%80%92%E5%88%86%E6%9E%90/


4、android 插件化：
  app启动：
   一个apk里面至少有2个classloader：
   boot类型的classloader:加载framework层的类
   apk里面的dex文件，文件里面都是java类，需要classloader去加载，这样就会创建一个apk的classloader 属于：pathdexclassloader

   jvm里面通过defineclass去加载jar里面的class文件
   android 里面通过findclass去加载class文件,先从当前的classloader的缓存里面去找，然后在从parent去找，没有在create这个类
   相同class  = 相同的classname + packagename+ classloader

   dexclassloader:可以加载jar,dex,apk，未安装
   pathclassloader:加载安装过的apk optimizedpathdir 为null,
   optimizedpathdir,用来缓存我们需要加载dex文件的。
   dexpathlist 用来加载class的，findclass方法
   basedexclassloader类中去加载class , 实际是从dexpathlist里面去查找
   https://android.googlesource.com/platform/libcore/+/09bb615/dalvik/src/main/java/dalvik/system/DexClassLoader.java

   了解app内部机制，可以实现动态加载插件


 5、apk包内部数据  

  libs/ jar|| so 等文件
  assets/ 静态文件
  res/ 资源文件
  class.dex 一个或者多个
  resources.arsc 可以理解为一个数据库用来存放资源文件和id 的映射关系
  manifest.xml
  meta-inf 证书信息

  安装过程：
  1、copy apk文件到/data/app目录下面
  2、校验apk的信息，例如：签名信息，结构正常，是否已经破坏
  3、解压apk中的文件，校验apk中的dex文件，如果没有问题，转换为odex,同时在/data/data/目录下面创建包名文件夹， copy相应的数据






